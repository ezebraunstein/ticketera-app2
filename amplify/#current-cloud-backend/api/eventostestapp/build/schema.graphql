
type Ticket {
  id: ID!
  QR: AWSURL!
  valido: Boolean!
  dni: Int!
  email: AWSEmail!
  tipoentradaID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TipoEntrada {
  id: ID!
  monto: Int!
  descripcion: String
  cantidad: Int!
  activo: Boolean!
  fechaInicio: AWSDateTime!
  fechaFin: AWSDateTime!
  eventoID: ID!
  Tickets(filter: ModelTicketFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTicketConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Evento {
  id: ID!
  nombreEvento: String!
  fechaInicio: AWSDateTime!
  fechaFin: AWSDateTime!
  fechaAlta: AWSDateTime!
  fechaBaja: AWSDateTime!
  descripcion: String
  imagenBanner: String
  imagenMini: String
  TipoEntradas(filter: ModelTipoEntradaFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTipoEntradaConnection
  usuarioID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Usuario {
  id: ID!
  nombre: String!
  apellido: String!
  dni: Int!
  email: AWSEmail!
  facturacion: String!
  Eventos(filter: ModelEventoFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelEventoConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTicketConnection {
  items: [Ticket]!
  nextToken: String
}

input ModelTicketFilterInput {
  id: ModelIDInput
  QR: ModelStringInput
  valido: ModelBooleanInput
  dni: ModelIntInput
  email: ModelStringInput
  tipoentradaID: ModelIDInput
  and: [ModelTicketFilterInput]
  or: [ModelTicketFilterInput]
  not: ModelTicketFilterInput
}

type Query {
  getTicket(id: ID!): Ticket
  listTickets(filter: ModelTicketFilterInput, limit: Int, nextToken: String): ModelTicketConnection
  getTipoEntrada(id: ID!): TipoEntrada
  listTipoEntradas(filter: ModelTipoEntradaFilterInput, limit: Int, nextToken: String): ModelTipoEntradaConnection
  getEvento(id: ID!): Evento
  listEventos(filter: ModelEventoFilterInput, limit: Int, nextToken: String): ModelEventoConnection
  getUsuario(id: ID!): Usuario
  listUsuarios(filter: ModelUsuarioFilterInput, limit: Int, nextToken: String): ModelUsuarioConnection
  ticketsByTipoentradaID(tipoentradaID: ID!, sortDirection: ModelSortDirection, filter: ModelTicketFilterInput, limit: Int, nextToken: String): ModelTicketConnection
  tipoEntradasByEventoID(eventoID: ID!, sortDirection: ModelSortDirection, filter: ModelTipoEntradaFilterInput, limit: Int, nextToken: String): ModelTipoEntradaConnection
  eventosByUsuarioID(usuarioID: ID!, sortDirection: ModelSortDirection, filter: ModelEventoFilterInput, limit: Int, nextToken: String): ModelEventoConnection
}

input ModelTicketConditionInput {
  QR: ModelStringInput
  valido: ModelBooleanInput
  dni: ModelIntInput
  email: ModelStringInput
  tipoentradaID: ModelIDInput
  and: [ModelTicketConditionInput]
  or: [ModelTicketConditionInput]
  not: ModelTicketConditionInput
}

input CreateTicketInput {
  id: ID
  QR: AWSURL!
  valido: Boolean!
  dni: Int!
  email: AWSEmail!
  tipoentradaID: ID!
}

input UpdateTicketInput {
  id: ID!
  QR: AWSURL
  valido: Boolean
  dni: Int
  email: AWSEmail
  tipoentradaID: ID
}

input DeleteTicketInput {
  id: ID!
}

type Mutation {
  createTicket(input: CreateTicketInput!, condition: ModelTicketConditionInput): Ticket
  updateTicket(input: UpdateTicketInput!, condition: ModelTicketConditionInput): Ticket
  deleteTicket(input: DeleteTicketInput!, condition: ModelTicketConditionInput): Ticket
  createTipoEntrada(input: CreateTipoEntradaInput!, condition: ModelTipoEntradaConditionInput): TipoEntrada
  updateTipoEntrada(input: UpdateTipoEntradaInput!, condition: ModelTipoEntradaConditionInput): TipoEntrada
  deleteTipoEntrada(input: DeleteTipoEntradaInput!, condition: ModelTipoEntradaConditionInput): TipoEntrada
  createEvento(input: CreateEventoInput!, condition: ModelEventoConditionInput): Evento
  updateEvento(input: UpdateEventoInput!, condition: ModelEventoConditionInput): Evento
  deleteEvento(input: DeleteEventoInput!, condition: ModelEventoConditionInput): Evento
  createUsuario(input: CreateUsuarioInput!, condition: ModelUsuarioConditionInput): Usuario
  updateUsuario(input: UpdateUsuarioInput!, condition: ModelUsuarioConditionInput): Usuario
  deleteUsuario(input: DeleteUsuarioInput!, condition: ModelUsuarioConditionInput): Usuario
}

input ModelSubscriptionTicketFilterInput {
  id: ModelSubscriptionIDInput
  QR: ModelSubscriptionStringInput
  valido: ModelSubscriptionBooleanInput
  dni: ModelSubscriptionIntInput
  email: ModelSubscriptionStringInput
  tipoentradaID: ModelSubscriptionIDInput
  and: [ModelSubscriptionTicketFilterInput]
  or: [ModelSubscriptionTicketFilterInput]
}

type Subscription {
  onCreateTicket(filter: ModelSubscriptionTicketFilterInput): Ticket @aws_subscribe(mutations: ["createTicket"])
  onUpdateTicket(filter: ModelSubscriptionTicketFilterInput): Ticket @aws_subscribe(mutations: ["updateTicket"])
  onDeleteTicket(filter: ModelSubscriptionTicketFilterInput): Ticket @aws_subscribe(mutations: ["deleteTicket"])
  onCreateTipoEntrada(filter: ModelSubscriptionTipoEntradaFilterInput): TipoEntrada @aws_subscribe(mutations: ["createTipoEntrada"])
  onUpdateTipoEntrada(filter: ModelSubscriptionTipoEntradaFilterInput): TipoEntrada @aws_subscribe(mutations: ["updateTipoEntrada"])
  onDeleteTipoEntrada(filter: ModelSubscriptionTipoEntradaFilterInput): TipoEntrada @aws_subscribe(mutations: ["deleteTipoEntrada"])
  onCreateEvento(filter: ModelSubscriptionEventoFilterInput): Evento @aws_subscribe(mutations: ["createEvento"])
  onUpdateEvento(filter: ModelSubscriptionEventoFilterInput): Evento @aws_subscribe(mutations: ["updateEvento"])
  onDeleteEvento(filter: ModelSubscriptionEventoFilterInput): Evento @aws_subscribe(mutations: ["deleteEvento"])
  onCreateUsuario(filter: ModelSubscriptionUsuarioFilterInput): Usuario @aws_subscribe(mutations: ["createUsuario"])
  onUpdateUsuario(filter: ModelSubscriptionUsuarioFilterInput): Usuario @aws_subscribe(mutations: ["updateUsuario"])
  onDeleteUsuario(filter: ModelSubscriptionUsuarioFilterInput): Usuario @aws_subscribe(mutations: ["deleteUsuario"])
}

type ModelTipoEntradaConnection {
  items: [TipoEntrada]!
  nextToken: String
}

input ModelTipoEntradaFilterInput {
  id: ModelIDInput
  monto: ModelIntInput
  descripcion: ModelStringInput
  cantidad: ModelIntInput
  activo: ModelBooleanInput
  fechaInicio: ModelStringInput
  fechaFin: ModelStringInput
  eventoID: ModelIDInput
  and: [ModelTipoEntradaFilterInput]
  or: [ModelTipoEntradaFilterInput]
  not: ModelTipoEntradaFilterInput
}

input ModelTipoEntradaConditionInput {
  monto: ModelIntInput
  descripcion: ModelStringInput
  cantidad: ModelIntInput
  activo: ModelBooleanInput
  fechaInicio: ModelStringInput
  fechaFin: ModelStringInput
  eventoID: ModelIDInput
  and: [ModelTipoEntradaConditionInput]
  or: [ModelTipoEntradaConditionInput]
  not: ModelTipoEntradaConditionInput
}

input CreateTipoEntradaInput {
  id: ID
  monto: Int!
  descripcion: String
  cantidad: Int!
  activo: Boolean!
  fechaInicio: AWSDateTime!
  fechaFin: AWSDateTime!
  eventoID: ID!
}

input UpdateTipoEntradaInput {
  id: ID!
  monto: Int
  descripcion: String
  cantidad: Int
  activo: Boolean
  fechaInicio: AWSDateTime
  fechaFin: AWSDateTime
  eventoID: ID
}

input DeleteTipoEntradaInput {
  id: ID!
}

input ModelSubscriptionTipoEntradaFilterInput {
  id: ModelSubscriptionIDInput
  monto: ModelSubscriptionIntInput
  descripcion: ModelSubscriptionStringInput
  cantidad: ModelSubscriptionIntInput
  activo: ModelSubscriptionBooleanInput
  fechaInicio: ModelSubscriptionStringInput
  fechaFin: ModelSubscriptionStringInput
  eventoID: ModelSubscriptionIDInput
  and: [ModelSubscriptionTipoEntradaFilterInput]
  or: [ModelSubscriptionTipoEntradaFilterInput]
}

type ModelEventoConnection {
  items: [Evento]!
  nextToken: String
}

input ModelEventoFilterInput {
  id: ModelIDInput
  nombreEvento: ModelStringInput
  fechaInicio: ModelStringInput
  fechaFin: ModelStringInput
  fechaAlta: ModelStringInput
  fechaBaja: ModelStringInput
  descripcion: ModelStringInput
  imagenBanner: ModelStringInput
  imagenMini: ModelStringInput
  usuarioID: ModelIDInput
  and: [ModelEventoFilterInput]
  or: [ModelEventoFilterInput]
  not: ModelEventoFilterInput
}

input ModelEventoConditionInput {
  nombreEvento: ModelStringInput
  fechaInicio: ModelStringInput
  fechaFin: ModelStringInput
  fechaAlta: ModelStringInput
  fechaBaja: ModelStringInput
  descripcion: ModelStringInput
  imagenBanner: ModelStringInput
  imagenMini: ModelStringInput
  usuarioID: ModelIDInput
  and: [ModelEventoConditionInput]
  or: [ModelEventoConditionInput]
  not: ModelEventoConditionInput
}

input CreateEventoInput {
  id: ID
  nombreEvento: String!
  fechaInicio: AWSDateTime!
  fechaFin: AWSDateTime!
  fechaAlta: AWSDateTime!
  fechaBaja: AWSDateTime!
  descripcion: String
  imagenBanner: String
  imagenMini: String
  usuarioID: ID!
}

input UpdateEventoInput {
  id: ID!
  nombreEvento: String
  fechaInicio: AWSDateTime
  fechaFin: AWSDateTime
  fechaAlta: AWSDateTime
  fechaBaja: AWSDateTime
  descripcion: String
  imagenBanner: String
  imagenMini: String
  usuarioID: ID
}

input DeleteEventoInput {
  id: ID!
}

input ModelSubscriptionEventoFilterInput {
  id: ModelSubscriptionIDInput
  nombreEvento: ModelSubscriptionStringInput
  fechaInicio: ModelSubscriptionStringInput
  fechaFin: ModelSubscriptionStringInput
  fechaAlta: ModelSubscriptionStringInput
  fechaBaja: ModelSubscriptionStringInput
  descripcion: ModelSubscriptionStringInput
  imagenBanner: ModelSubscriptionStringInput
  imagenMini: ModelSubscriptionStringInput
  usuarioID: ModelSubscriptionIDInput
  and: [ModelSubscriptionEventoFilterInput]
  or: [ModelSubscriptionEventoFilterInput]
}

type ModelUsuarioConnection {
  items: [Usuario]!
  nextToken: String
}

input ModelUsuarioFilterInput {
  id: ModelIDInput
  nombre: ModelStringInput
  apellido: ModelStringInput
  dni: ModelIntInput
  email: ModelStringInput
  facturacion: ModelStringInput
  and: [ModelUsuarioFilterInput]
  or: [ModelUsuarioFilterInput]
  not: ModelUsuarioFilterInput
}

input ModelUsuarioConditionInput {
  nombre: ModelStringInput
  apellido: ModelStringInput
  dni: ModelIntInput
  email: ModelStringInput
  facturacion: ModelStringInput
  and: [ModelUsuarioConditionInput]
  or: [ModelUsuarioConditionInput]
  not: ModelUsuarioConditionInput
}

input CreateUsuarioInput {
  id: ID
  nombre: String!
  apellido: String!
  dni: Int!
  email: AWSEmail!
  facturacion: String!
}

input UpdateUsuarioInput {
  id: ID!
  nombre: String
  apellido: String
  dni: Int
  email: AWSEmail
  facturacion: String
}

input DeleteUsuarioInput {
  id: ID!
}

input ModelSubscriptionUsuarioFilterInput {
  id: ModelSubscriptionIDInput
  nombre: ModelSubscriptionStringInput
  apellido: ModelSubscriptionStringInput
  dni: ModelSubscriptionIntInput
  email: ModelSubscriptionStringInput
  facturacion: ModelSubscriptionStringInput
  and: [ModelSubscriptionUsuarioFilterInput]
  or: [ModelSubscriptionUsuarioFilterInput]
}

